/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/UnitTests/JUnit4TestClass.java to edit this template
 */
package com.mycompany.poe_part_1;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author hilar
 */
public class MessageTest {
    
   @Before
    public void setup() {
        Message.clearMessagesList(); // Reset state before each test
    }

    @Test
    public void testSendMessage1_CreationAndHash() {
        // Data for Message 1
        String content = "Hi Mike, can you join us for dinner tonight";
        long recipient = 27718693002L;

        Message message = new Message(content, recipient);

        // Assertions
        assertNotNull("Message ID should be generated.", message.getMessageId());
        assertTrue("Message ID should be at least 10 digits.", String.valueOf(message.getMessageId()).length() >= 10);

        assertEquals("Message content mismatch.", content, message.getMessage());
        assertEquals("Recipient mismatch.", recipient, message.getRecipient());

        assertNotNull("Message hash should be generated.", message.getMessageHash());
        assertTrue("Hash format should match.", message.getMessageHash().matches("^\\d{2}:\\d+:Hi.*tonight$"));

        assertEquals("Total messages should be 1.", 1, Message.getMessagesList().size());
    }

    @Test
    public void testMessage2_Discarded_NotCreated() {
        // Message is discarded, so we simulate that by not creating it
        assertEquals("No message should be created if discarded.", 0, Message.getMessagesList().size());
    }

    @Test
    public void testSendMessage1_ThenDiscardMessage2() {
        // Message 1 (Send)
        Message message1 = new Message("Hi Mike, can you join us for dinner tonight", 27718693002L);

        // Message 2 (Discard - not created)
        // No action

        assertEquals("Only one message should be in the list.", 1, Message.getMessagesList().size());
    }

    @Test
    public void testMultipleMessages_AutoGeneratedValues() {
        Message m1 = new Message("Hi Mike, can you join us for dinner tonight", 27718693002L);
        Message m2 = new Message("Hi Keegan, did you receive the payment?", 8575975889L);

        assertEquals("Two messages should be created.", 2, Message.getMessagesList().size());

        for (Message m : Message.getMessagesList()) {
            assertNotNull("Message ID should not be null.", m.getMessageId());
            assertNotNull("Message hash should not be null.", m.getMessageHash());
            assertTrue("Message hash should contain colon separators.", m.getMessageHash().contains(":"));
        }
    }
    
}
